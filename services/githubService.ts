const GITHUB_API_URL = 'https://api.github.com';

interface DeployParams {
  token: string;
  repoName: string;
  htmlContent: string;
}

// Helper to make authenticated API requests
async function githubApiRequest(endpoint: string, token: string, options: RequestInit = {}) {
  const response = await fetch(`${GITHUB_API_URL}${endpoint}`, {
    ...options,
    headers: {
      'Authorization': `token ${token}`,
      'Accept': 'application/vnd.github.v3+json',
      'X-GitHub-Api-Version': '2022-11-28',
      ...options.headers,
    },
  });

  if (!response.ok) {
    const errorData = await response.json();
    throw new Error(`GitHub API Error (${response.status} on ${options.method || 'GET'} ${endpoint}): ${errorData.message || 'Unknown error'}`);
  }

  // Some responses are empty (204 No Content), so handle that
  if (response.status === 204) {
    return null;
  }

  return response.json();
}


export const deployToGithubPages = async ({ token, repoName, htmlContent }: DeployParams): Promise<string> => {
  // 1. Get user information to find the owner login
  const user = await githubApiRequest('/user', token);
  const owner = user.login;

  // 2. Create a new public repository
  try {
    await githubApiRequest('/user/repos', token, {
      method: 'POST',
      body: JSON.stringify({
        name: repoName,
        private: false,
        description: 'Website generated by bolt.jk',
        auto_init: false, // We will create the first commit ourselves
      }),
    });
  } catch (error) {
     if (error instanceof Error && error.message.includes("Name already exists on this account")) {
        // repo already exists, we can proceed to update it
        console.log(`Repository '${repoName}' already exists. Proceeding with update.`);
     } else {
        throw error;
     }
  }

  // 3. Create or update the index.html file
  const filePath = 'index.html';
  let fileSha: string | undefined = undefined;

  // Check if file already exists to get its SHA for updating
  try {
    const existingFile = await githubApiRequest(`/repos/${owner}/${repoName}/contents/${filePath}`, token);
    if (existingFile && existingFile.sha) {
      fileSha = existingFile.sha;
    }
  } catch (error) {
    // If it's a 404, that's fine, it means the file doesn't exist yet.
    if (!(error instanceof Error && error.message.includes("404"))) {
        throw error;
    }
  }

  await githubApiRequest(`/repos/${owner}/${repoName}/contents/${filePath}`, token, {
    method: 'PUT',
    body: JSON.stringify({
      message: 'Deploy website from bolt.jk',
      content: btoa(htmlContent), // btoa is a browser function for base64 encoding
      sha: fileSha, // include SHA if updating an existing file
    }),
  });
  
  // 4. Enable GitHub Pages for the repository
  try {
    await githubApiRequest(`/repos/${owner}/${repoName}/pages`, token, {
      method: 'POST',
      body: JSON.stringify({
        source: {
          branch: 'main', // Assumes 'main' is the default branch
          path: '/',
        },
      }),
    });
  } catch (error) {
    // It might be already enabled, which can cause an error. We can often ignore this.
    console.warn("Could not enable GitHub Pages (it might be enabled already):", error);
  }

  // 5. Return the expected URL
  const deployedUrl = `https://${owner}.github.io/${repoName}/`;
  return deployedUrl;
};
